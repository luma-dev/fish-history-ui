// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// History history
//
// swagger:model History
type History struct {

	// cmd
	// Required: true
	Cmd *string `json:"cmd"`

	// paths
	// Min Items: 1
	Paths []string `json:"paths"`

	// when
	// Required: true
	When *Timestamp `json:"when"`
}

// Validate validates this history
func (m *History) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCmd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhen(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) validateCmd(formats strfmt.Registry) error {

	if err := validate.Required("cmd", "body", m.Cmd); err != nil {
		return err
	}

	return nil
}

func (m *History) validatePaths(formats strfmt.Registry) error {
	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	iPathsSize := int64(len(m.Paths))

	if err := validate.MinItems("paths", "body", iPathsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *History) validateWhen(formats strfmt.Registry) error {

	if err := validate.Required("when", "body", m.When); err != nil {
		return err
	}

	if err := validate.Required("when", "body", m.When); err != nil {
		return err
	}

	if m.When != nil {
		if err := m.When.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("when")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this history based on the context it is used
func (m *History) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWhen(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *History) contextValidateWhen(ctx context.Context, formats strfmt.Registry) error {

	if m.When != nil {
		if err := m.When.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("when")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *History) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *History) UnmarshalBinary(b []byte) error {
	var res History
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
