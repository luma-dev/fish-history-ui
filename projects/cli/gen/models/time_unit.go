// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TimeUnit time unit
//
// swagger:model TimeUnit
type TimeUnit string

func NewTimeUnit(value TimeUnit) *TimeUnit {
	v := value
	return &v
}

const (

	// TimeUnitAll captures enum value "all"
	TimeUnitAll TimeUnit = "all"

	// TimeUnitYear captures enum value "year"
	TimeUnitYear TimeUnit = "year"

	// TimeUnitMonth captures enum value "month"
	TimeUnitMonth TimeUnit = "month"

	// TimeUnitWeek captures enum value "week"
	TimeUnitWeek TimeUnit = "week"

	// TimeUnitDay captures enum value "day"
	TimeUnitDay TimeUnit = "day"

	// TimeUnitHour captures enum value "hour"
	TimeUnitHour TimeUnit = "hour"

	// TimeUnitMinute captures enum value "minute"
	TimeUnitMinute TimeUnit = "minute"

	// TimeUnitSecond captures enum value "second"
	TimeUnitSecond TimeUnit = "second"
)

// for schema
var timeUnitEnum []interface{}

func init() {
	var res []TimeUnit
	if err := json.Unmarshal([]byte(`["all","year","month","week","day","hour","minute","second"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeUnitEnum = append(timeUnitEnum, v)
	}
}

func (m TimeUnit) validateTimeUnitEnum(path, location string, value TimeUnit) error {
	if err := validate.EnumCase(path, location, value, timeUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this time unit
func (m TimeUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTimeUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this time unit based on context it is used
func (m TimeUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
